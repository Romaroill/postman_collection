{
	"info": {
		"_postman_id": "edfec9a2-3a00-445b-bff3-8ae72bef94e3",
		"name": "Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test_NASA",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/planetary/apod?api_key=InuIOIr4AKs2Of5hsypv72ke2kEfyv7MuqzCVFV6",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"planetary",
						"apod"
					],
					"query": [
						{
							"key": "api_key",
							"value": "InuIOIr4AKs2Of5hsypv72ke2kEfyv7MuqzCVFV6"
						}
					]
				},
				"description": "TEST"
			},
			"response": []
		},
		{
			"name": "https://postman-echo.com/basic-auth",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password",
							"type": "string"
						},
						{
							"key": "username",
							"value": "postman",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "Basic cG9zdG1hbjpwYXNzd29yZA==",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://postman-echo.com/basic-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "https://postb.in/1598603487176-4995796643197",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"test\":\"value\"}"
				},
				"url": {
					"raw": "https://postb.in/1598603487176-4995796643197",
					"protocol": "https",
					"host": [
						"postb",
						"in"
					],
					"path": [
						"1598603487176-4995796643197"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://stackoverflow.com/",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "stackoverflow.com"
					},
					{
						"key": "cache-control",
						"value": "max-age=0"
					},
					{
						"key": "upgrade-insecure-requests",
						"value": "1"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36"
					},
					{
						"key": "accept",
						"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
					},
					{
						"key": "sec-fetch-site",
						"value": "cross-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "navigate"
					},
					{
						"key": "sec-fetch-user",
						"value": "?1"
					},
					{
						"key": "sec-fetch-dest",
						"value": "document"
					},
					{
						"key": "referer",
						"value": "https://www.google.com/"
					},
					{
						"key": "accept-language",
						"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
					},
					{
						"key": "cookie",
						"value": "prov=9281c7c8-2dd8-88e4-cf24-3ffa0d4c2a85; _ga=GA1.2.1393745297.1598604440; _gid=GA1.2.1035845127.1598604440; __gads=ID=e238462739f01d18:T=1598604440:S=ALNI_MbEyW7sWluRtpAIwEk1SLb1O_1wRw; __qca=P0-1182974316-1598604439889"
					}
				],
				"url": {
					"raw": "https://stackoverflow.com/",
					"protocol": "https",
					"host": [
						"stackoverflow",
						"com"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "26ded6ce-ef03-4774-b690-e8182f417cb9",
						"exec": [
							"//1.Correct response format JSON\r",
							"pm.test(\"Correct response format JSON\", function() {\r",
							"    pm.response.to.have.jsonBody()\r",
							"});\r",
							"\r",
							"//2. We have all the declared fields in the response\r",
							"pm.test(\"Check thet we have all declared fields\", function() {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"people\");\r",
							"    pm.expect(jsonData).to.have.property(\"planets\");\r",
							"    pm.expect(jsonData).to.have.property(\"films\");\r",
							"    pm.expect(jsonData).to.have.property(\"species\");\r",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");\r",
							"    pm.expect(jsonData).to.have.property(\"starships\");\r",
							"});\r",
							"\r",
							"//3. Field value isn`t NULL\r",
							"pm.test(\"Check isn`t NULL\", function() {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.people) != null;\r",
							"    pm.expect(jsonData.planets) != null;\r",
							"    pm.expect(jsonData.films) != null;\r",
							"    pm.expect(jsonData.species) != null;\r",
							"    pm.expect(jsonData.vehicles) != null;\r",
							"    pm.expect(jsonData.starships) != null;\r",
							"});\r",
							"\r",
							"//4. Check if value isn`t empty\r",
							"pm.test(\"Check if value isn`t empty\", function() {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.people) != \"\";\r",
							"    pm.expect(jsonData.planets) != \"\";\r",
							"    pm.expect(jsonData.films) != \"\";\r",
							"    pm.expect(jsonData.species) != \"\";\r",
							"    pm.expect(jsonData.vehicles) != \"\";\r",
							"    pm.expect(jsonData.starships) != \"\";\r",
							"});\r",
							"\r",
							"//5. Check if field corresponds is specific value\r",
							"pm.test(\"Check if field corresponds is specific value\", function() {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.people) == \"http://swapi.dev/api/people/\";\r",
							"    pm.expect(jsonData.planets) == \"http://swapi.dev/api/planets/\";\r",
							"    pm.expect(jsonData.films) == \"http://swapi.dev/api/films/\";\r",
							"    pm.expect(jsonData.species) == \"http://swapi.dev/api/species/\";\r",
							"    pm.expect(jsonData.vehicles) == \"http://swapi.dev/api/vehicles/\";\r",
							"    pm.expect(jsonData.starships) == \"http://swapi.dev/api/starships/\";    \r",
							"});\r",
							"\r",
							"//6. Status code is 200\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//7. Status message is ok\r",
							"pm.test(\"Status message is ok\", function() {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//8. Response time is less than 1000ms\r",
							"pm.test(\"Response time is less than 1000ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//9. There is a specific header in the response\r",
							"pm.test(\"There is a specific header in the response\", function() {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//10. The response has a specific header with the specific value\r",
							"pm.test(\"The response has a specific header with the specific value\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"//11. Cookie exists\r",
							"pm.test(\"Cookie exists\", function() {\r",
							"    pm.cookies.has(\"\");\r",
							"});\r",
							"\r",
							"//12. Cookie has value\r",
							"pm.test(\"Cookie has value\", function() {\r",
							"    try {\r",
							"        let MY_COOKIES = pm.cookies.get(\"\");\r",
							"        console.log(MY_COOKIES)\r",
							"    }   catch(e) {\r",
							"        console.log(\"Some problem with cookies ->\" + e)\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a453fb7b-177f-498b-92da-3610846c1e4f",
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    //specify the type of the object\r",
							"    \"type\": \"object\",\r",
							"    //specify required properties\r",
							"    \"required\": [\"people\", \"planets\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    //describe the properties\r",
							"    \"properties\": {\r",
							"        \"people\": {\"type\":\"string\"},\r",
							"        \"planets\": {\"type\":\"string\"},\r",
							"        \"films\": {\"type\":\"string\"},\r",
							"        \"species\": {\"type\":\"string\"},\r",
							"        \"vehicles\": {\"type\":\"string\"},\r",
							"        \"starships\": {\"type\":\"string\"}\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Body is correct\", function() {\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"    //for negative testing choose false\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://82d3f9f4-11fb-40fc-a166-3c589a63f850.mock.pstmn.io",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://82d3f9f4-11fb-40fc-a166-3c589a63f850.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"82d3f9f4-11fb-40fc-a166-3c589a63f850",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://82d3f9f4-11fb-40fc-a166-3c589a63f850.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://82d3f9f4-11fb-40fc-a166-3c589a63f850.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"82d3f9f4-11fb-40fc-a166-3c589a63f850",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 31 Aug 2020 14:39:04 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=50055abf3541b729"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=db2753471c151382"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1598884802"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\"\n        \n    }\n}"
				},
				{
					"name": "https://82d3f9f4-11fb-40fc-a166-3c589a63f850.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Roma\"}"
						},
						"url": {
							"raw": "https://82d3f9f4-11fb-40fc-a166-3c589a63f850.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"82d3f9f4-11fb-40fc-a166-3c589a63f850",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 31 Aug 2020 14:41:35 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=50055abf3541b729"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=db2753471c151382"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1598884802"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Roma\",\n        \"status\": \"created\",\n        \"message\": \"success\"\n    }\n}"
				}
			]
		},
		{
			"name": "https://82d3f9f4-11fb-40fc-a166-3c589a63f850.mock.pstmn.io",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Roma\"}"
				},
				"url": {
					"raw": "https://82d3f9f4-11fb-40fc-a166-3c589a63f850.mock.pstmn.io/action",
					"protocol": "https",
					"host": [
						"82d3f9f4-11fb-40fc-a166-3c589a63f850",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"action"
					]
				}
			},
			"response": [
				{
					"name": "https://82d3f9f4-11fb-40fc-a166-3c589a63f850.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://82d3f9f4-11fb-40fc-a166-3c589a63f850.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"82d3f9f4-11fb-40fc-a166-3c589a63f850",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 31 Aug 2020 14:39:04 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=50055abf3541b729"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=db2753471c151382"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1598884802"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\"\n        \n    }\n}"
				},
				{
					"name": "https://82d3f9f4-11fb-40fc-a166-3c589a63f850.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Roma\"}"
						},
						"url": {
							"raw": "https://82d3f9f4-11fb-40fc-a166-3c589a63f850.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"82d3f9f4-11fb-40fc-a166-3c589a63f850",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 31 Aug 2020 14:41:35 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=50055abf3541b729"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=db2753471c151382"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1598884802"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Roma\",\n        \"status\": \"created\",\n        \"message\": \"success\"\n    }\n}"
				}
			]
		}
	],
	"protocolProfileBehavior": {}
}